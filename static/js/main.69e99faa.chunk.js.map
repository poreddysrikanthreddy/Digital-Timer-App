{"version":3,"sources":["components/DigitalTimer/index.js","App.js","index.js"],"names":["initialState","isTimerRunning","timeElapsedInSeconds","timerLimitInMinutes","DigitalTimer","state","clearTimerInterval","clearInterval","intervalId","onTimerLimitInMinutesDecrement","setState","prevState","onTimerLimitInMinutesIncrement","renderTimerLimitControllerSection","isButtonsDisabled","className","disabled","onClick","type","onClickReset","incrementTimeElapsedInSeconds","onClickStartOrPause","setInterval","renderTimerControllerSection","startOrPauseImageUrl","startOrPauseAltText","alt","src","getElapsedSecondsInTimeFormat","totalRemainingSeconds","minutes","Math","floor","seconds","stringifiedMinutes","stringifiedSeconds","this","labelText","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69e99faa.chunk.js","sourcesContent":["import {Component} from 'react'\n\nimport './index.css'\n\nconst initialState = {\n  isTimerRunning: false,\n  timeElapsedInSeconds: 0,\n  timerLimitInMinutes: 15,\n}\n\nclass DigitalTimer extends Component {\n  state = initialState\n\n  componentWillUnmount() {\n    this.clearTimerInterval()\n  }\n\n  clearTimerInterval = () => clearInterval(this.intervalId)\n\n  onTimerLimitInMinutesDecrement = () => {\n    const {timerLimitInMinutes} = this.state\n\n    if (timerLimitInMinutes > 1) {\n      this.setState(prevState => ({\n        timerLimitInMinutes: prevState.timerLimitInMinutes - 1,\n      }))\n    }\n  }\n\n  onTimerLimitInMinutesIncrement = () =>\n    this.setState(prevState => ({\n      timerLimitInMinutes: prevState.timerLimitInMinutes + 1,\n    }))\n\n  renderTimerLimitControllerSection = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const isButtonsDisabled = timeElapsedInSeconds > 0\n\n    return (\n      <div className=\"timer-limit-controller-section\">\n        <p className=\"limit-label\">Set Timer limit</p>\n        <div className=\"timer-limit-controller\">\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onTimerLimitInMinutesDecrement}\n            type=\"button\"\n          >\n            -\n          </button>\n          <div className=\"limit-label-and-value-container\">\n            <p className=\"limit-value\">{timerLimitInMinutes}</p>\n          </div>\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onTimerLimitInMinutesIncrement}\n            type=\"button\"\n          >\n            +\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  onClickReset = () => {\n    this.clearTimerInterval()\n    this.setState(initialState)\n  }\n\n  incrementTimeElapsedInSeconds = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const isTimerCompleted = timeElapsedInSeconds === timerLimitInMinutes * 60\n\n    if (isTimerCompleted) {\n      this.clearTimerInterval()\n      this.setState({isTimerRunning: false})\n    } else {\n      this.setState(prevState => ({\n        timeElapsedInSeconds: prevState.timeElapsedInSeconds + 1,\n      }))\n    }\n  }\n\n  onClickStartOrPause = () => {\n    const {\n      isTimerRunning,\n      timeElapsedInSeconds,\n      timerLimitInMinutes,\n    } = this.state\n    const isTimerCompleted = timeElapsedInSeconds === timerLimitInMinutes * 60\n\n    if (isTimerCompleted) {\n      this.setState({timeElapsedInSeconds: 0})\n    }\n    if (isTimerRunning) {\n      this.clearTimerInterval()\n    } else {\n      this.intervalId = setInterval(this.incrementTimeElapsedInSeconds, 1000)\n    }\n    this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\n  }\n\n  renderTimerControllerSection = () => {\n    const {isTimerRunning} = this.state\n    const startOrPauseImageUrl = isTimerRunning\n      ? 'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png'\n      : 'https://assets.ccbp.in/frontend/react-js/play-icon-img.png'\n    const startOrPauseAltText = isTimerRunning ? 'pause icon' : 'play icon'\n\n    return (\n      <div className=\"timer-controller-section\">\n        <button\n          className=\"timer-controller-btn\"\n          onClick={this.onClickStartOrPause}\n          type=\"button\"\n        >\n          <img\n            alt={startOrPauseAltText}\n            className=\"timer-controller-icon\"\n            src={startOrPauseImageUrl}\n          />\n          <p className=\"timer-controller-label\">\n            {isTimerRunning ? 'Pause' : 'Start'}\n          </p>\n        </button>\n        <button\n          className=\"timer-controller-btn\"\n          onClick={this.onClickReset}\n          type=\"button\"\n        >\n          <img\n            alt=\"reset icon\"\n            className=\"timer-controller-icon\"\n            src=\"https://assets.ccbp.in/frontend/react-js/reset-icon-img.png\"\n          />\n          <p className=\"timer-controller-label\">Reset</p>\n        </button>\n      </div>\n    )\n  }\n\n  getElapsedSecondsInTimeFormat = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const totalRemainingSeconds =\n      timerLimitInMinutes * 60 - timeElapsedInSeconds\n    const minutes = Math.floor(totalRemainingSeconds / 60)\n    const seconds = Math.floor(totalRemainingSeconds % 60)\n    const stringifiedMinutes = minutes > 9 ? minutes : `0${minutes}`\n    const stringifiedSeconds = seconds > 9 ? seconds : `0${seconds}`\n\n    return `${stringifiedMinutes}:${stringifiedSeconds}`\n  }\n\n  render() {\n    const {isTimerRunning} = this.state\n    const labelText = isTimerRunning ? 'Running' : 'Paused'\n\n    return (\n      <div className=\"app-container\">\n        <h1 className=\"heading\">Digital Timer</h1>\n        <div className=\"digital-timer-container\">\n          <div className=\"timer-display-section\">\n            <div className=\"elapsed-time-container\">\n              <h1 className=\"elapsed-time\">\n                {this.getElapsedSecondsInTimeFormat()}\n              </h1>\n              <p className=\"timer-state\">{labelText}</p>\n            </div>\n          </div>\n          <div className=\"controls-section\">\n            {this.renderTimerControllerSection()}\n            {this.renderTimerLimitControllerSection()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DigitalTimer\n","import DigitalTimer from './components/DigitalTimer'\n\nimport './App.css'\n\nconst App = () => <DigitalTimer />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}